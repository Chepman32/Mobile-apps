import React, { useState, useEffect, useCallback } from 'react';import { View, Text, FlatList, TouchableOpacity, StyleSheet, Alert } from 'react-native';import SQLite from 'react-native-sqlite-storage';const db = SQLite.openDatabase({ name: 'citationManager.db', location: 'default' }, () => {}, (error) => console.error('Error opening database', error));const CitationListScreen = ({ navigation }) => {  const [citations, setCitations] = useState([]);  const loadCitations = useCallback(() => {    db.transaction((tx) => {      tx.executeSql(        'CREATE TABLE IF NOT EXISTS citations (id INTEGER PRIMARY KEY AUTOINCREMENT, author TEXT, title TEXT, year TEXT, format TEXT, isPremium INTEGER)',        [],        () => {          // Insert dummy data if table is empty          tx.executeSql(            'SELECT * FROM citations',            [],            (_, { rows }) => {              if (rows.length === 0) {                const dummyCitations = [                  { author: 'Smith, J.', title: 'The Art of React Native', year: '2023', format: 'APA', isPremium: 0 },                  { author: 'Doe, A.', title: 'Advanced JavaScript', year: '2022', format: 'MLA', isPremium: 0 },                  { author: 'Brown, C.', title: 'Quantum Computing for Dummies', year: '2024', format: 'Chicago', isPremium: 1 },                ];                dummyCitations.forEach(c => {                  tx.executeSql(                    'INSERT INTO citations (author, title, year, format, isPremium) VALUES (?, ?, ?, ?, ?)',                    [c.author, c.title, c.year, c.format, c.isPremium],                    () => {},                    (tx, error) => console.error('Error inserting citation', error)                  );                });              }              tx.executeSql(                'SELECT * FROM citations',                [],                (_, { rows: allRows }) => {                  const loadedCitations = [];                  for (let i = 0; i < allRows.length; i++) {                    loadedCitations.push(allRows.item(i));                  }                  setCitations(loadedCitations);                },                (tx, error) => console.error('Error fetching citations', error)              );            },            (tx, error) => console.error('Error checking citations', error)          );        },        (tx, error) => console.error('Error creating table', error)      );    });  }, []);  useEffect(() => {    loadCitations();    const unsubscribe = navigation.addListener('focus', () => {      loadCitations();    });    return unsubscribe;  }, [navigation, loadCitations]);  const addCitation = () => {    navigation.navigate('AddCitation');  };  const handleCitationPress = (citation) => {    if (citation.isPremium) {      Alert.alert(        'Premium Feature',        'This citation format is a premium feature. Purchase to unlock!',        [          { text: 'Cancel', style: 'cancel' },          { text: 'Purchase', onPress: () => purchasePremium() },        ]      );    } else {      Alert.alert('Citation Details', `Author: ${citation.author}\nTitle: ${citation.title}\nYear: ${citation.year}\nFormat: ${citation.format}`);    }  };  const purchasePremium = () => {    Alert.alert(      'Purchase Premium Features',      'In a real app, this would initiate an in-app purchase for premium formats, advanced features, etc.'    );  };  const renderCitationItem = ({ item }) => (    <TouchableOpacity      style={[styles.citationItem, item.isPremium ? styles.premiumCitationItem : null]}      onPress={() => handleCitationPress(item)}    >      <Text style={styles.citationTitle}>{item.title}</Text>      <Text style={styles.citationAuthor}>{item.author}</Text>      {item.isPremium ? <Text style={styles.premiumText}>‚≠ê Premium</Text> : null}    </TouchableOpacity>  );  return (    <View style={styles.container}>      <FlatList        data={citations}        keyExtractor={(item) => item.id.toString()}        renderItem={renderCitationItem}        ListEmptyComponent={<Text style={styles.emptyText}>No citations found. Add one!</Text>}      />      <TouchableOpacity style={styles.addButton} onPress={addCitation}>        <Text style={styles.buttonText}>Add New Citation</Text>      </TouchableOpacity>      <TouchableOpacity style={styles.premiumButton} onPress={purchasePremium}>        <Text style={styles.buttonText}>Go Premium</Text>      </TouchableOpacity>    </View>  );};const styles = StyleSheet.create({  container: {    flex: 1,    padding: 20,    backgroundColor: '#f0f8ff',  },  citationItem: {    padding: 15,    backgroundColor: '#fff',    marginBottom: 10,    borderRadius: 8,    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3,  },  premiumCitationItem: {    backgroundColor: '#ffe0b2',  },  citationTitle: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',  },  citationAuthor: {    fontSize: 14,    color: '#666',    marginTop: 5,  },  premiumText: {    fontSize: 14,    color: '#ff8c00',    fontWeight: 'bold',  },  addButton: {    backgroundColor: '#007bff',    paddingVertical: 15,    borderRadius: 8,    alignItems: 'center',    marginTop: 20,  },  buttonText: {    color: 'white',    fontSize: 18,    fontWeight: 'bold',  },  premiumButton: {    backgroundColor: '#28a745',    paddingVertical: 15,    borderRadius: 8,    alignItems: 'center',    marginTop: 10,  },  emptyText: {    textAlign: 'center',    marginTop: 50,    fontSize: 16,    color: 'gray',  },});export default CitationListScreen;