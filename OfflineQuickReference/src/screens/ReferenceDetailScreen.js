import React, { useState, useEffect, useCallback } from 'react';import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert } from 'react-native';import SQLite from 'react-native-sqlite-storage';import Share from 'react-native-share';import PDFLib, { PDFDocument, PDFPage } from 'react-native-pdf-lib';const db = SQLite.openDatabase({ name: 'reference.db', location: 'default' }, () => {}, (error) => console.error('Error opening database', error));const ReferenceDetailScreen = ({ route }) => {  const { referenceId } = route.params;  const [reference, setReference] = useState(null);  const loadReference = useCallback(() => {    db.transaction((tx) => {      tx.executeSql(        'SELECT * FROM references WHERE id = ?',        [referenceId],        (_, { rows }) => {          if (rows.length > 0) {            setReference(rows.item(0));          }        },        (tx, error) => console.error('Error fetching reference', error)      );    });  }, [referenceId]);  useEffect(() => {    loadReference();  }, [loadReference]);  const generatePdf = async () => {    if (!reference) return;    const pdfPath = `${PDFLib.DocumentDirectoryPath}/${reference.title.replace(/\s/g, '_')}.pdf`;    try {      const pdf = await PDFDocument.create();      const page = PDFPage.create()        .setMediaBox(200, 200)        .drawText(reference.title, { x: 50, y: 150, fontSize: 24, color: 'black' })        .drawText(reference.content, { x: 50, y: 100, fontSize: 12, color: 'gray' });      pdf.addPages(page);      await pdf.write(pdfPath);      Alert.alert('PDF Generated', `PDF saved to: ${pdfPath}`);      // In a real app, you might open the PDF or share it    } catch (error) {      console.error('Error generating PDF:', error);      Alert.alert('Error', 'Failed to generate PDF.');    }  };  const shareReference = async () => {    if (!reference) return;    const shareText = `Quick Reference: ${reference.title}\nCategory: ${reference.category}\nContent: ${reference.content}`;    try {      await Share.open({        message: shareText,        title: `Quick Reference: ${reference.title}`,      });    } catch (error) {      console.error('Error sharing reference:', error);      Alert.alert('Share Failed', 'Could not share reference.');    }  };  if (!reference) {    return (      <View style={styles.container}>        <Text>Loading reference details...</Text>      </View>    );  }  return (    <ScrollView style={styles.container}>      <Text style={styles.referenceTitle}>{reference.title}</Text>      <Text style={styles.referenceCategory}>{reference.category}</Text>      <Text style={styles.sectionTitle}>Content:</Text>      <Text style={styles.sectionContent}>{reference.content}</Text>      <TouchableOpacity style={styles.button} onPress={generatePdf}>        <Text style={styles.buttonText}>Generate PDF</Text>      </TouchableOpacity>      <TouchableOpacity style={styles.button} onPress={shareReference}>        <Text style={styles.buttonText}>Share Reference</Text>      </TouchableOpacity>    </ScrollView>  );};const styles = StyleSheet.create({  container: {    flex: 1,    padding: 20,    backgroundColor: '#f0f8ff',  },  referenceTitle: {    fontSize: 28,    fontWeight: 'bold',    textAlign: 'center',    marginBottom: 5,    color: '#333',  },  referenceCategory: {    fontSize: 18,    fontStyle: 'italic',    textAlign: 'center',    marginBottom: 20,    color: '#666',  },  sectionTitle: {    fontSize: 20,    fontWeight: 'bold',    marginTop: 15,    marginBottom: 10,    color: '#333',  },  sectionContent: {    fontSize: 16,    lineHeight: 24,    color: '#555',  },  button: {    backgroundColor: '#007bff',    paddingVertical: 15,    borderRadius: 8,    alignItems: 'center',    marginTop: 20,  },  buttonText: {    color: 'white',    fontSize: 18,    fontWeight: 'bold',  },});export default ReferenceDetailScreen;